/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pagacz.kafka.listener.model.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FlatData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6689909378939659128L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlatData\",\"namespace\":\"com.pagacz.kafka.listener.model.generated\",\"fields\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"comment\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"string\"},{\"name\":\"originalPrice\",\"type\":\"string\"},{\"name\":\"space\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FlatData> ENCODER =
      new BinaryMessageEncoder<FlatData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FlatData> DECODER =
      new BinaryMessageDecoder<FlatData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FlatData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FlatData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FlatData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FlatData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FlatData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FlatData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FlatData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FlatData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence title;
   private java.lang.CharSequence source;
   private java.lang.CharSequence link;
   private java.lang.CharSequence comment;
   private java.lang.CharSequence price;
   private java.lang.CharSequence originalPrice;
   private java.lang.CharSequence space;
   private java.lang.CharSequence address;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FlatData() {}

  /**
   * All-args constructor.
   * @param title The new value for title
   * @param source The new value for source
   * @param link The new value for link
   * @param comment The new value for comment
   * @param price The new value for price
   * @param originalPrice The new value for originalPrice
   * @param space The new value for space
   * @param address The new value for address
   */
  public FlatData(java.lang.CharSequence title, java.lang.CharSequence source, java.lang.CharSequence link, java.lang.CharSequence comment, java.lang.CharSequence price, java.lang.CharSequence originalPrice, java.lang.CharSequence space, java.lang.CharSequence address) {
    this.title = title;
    this.source = source;
    this.link = link;
    this.comment = comment;
    this.price = price;
    this.originalPrice = originalPrice;
    this.space = space;
    this.address = address;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return source;
    case 2: return link;
    case 3: return comment;
    case 4: return price;
    case 5: return originalPrice;
    case 6: return space;
    case 7: return address;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: title = (java.lang.CharSequence)value$; break;
    case 1: source = (java.lang.CharSequence)value$; break;
    case 2: link = (java.lang.CharSequence)value$; break;
    case 3: comment = (java.lang.CharSequence)value$; break;
    case 4: price = (java.lang.CharSequence)value$; break;
    case 5: originalPrice = (java.lang.CharSequence)value$; break;
    case 6: space = (java.lang.CharSequence)value$; break;
    case 7: address = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'link' field.
   * @return The value of the 'link' field.
   */
  public java.lang.CharSequence getLink() {
    return link;
  }


  /**
   * Sets the value of the 'link' field.
   * @param value the value to set.
   */
  public void setLink(java.lang.CharSequence value) {
    this.link = value;
  }

  /**
   * Gets the value of the 'comment' field.
   * @return The value of the 'comment' field.
   */
  public java.lang.CharSequence getComment() {
    return comment;
  }


  /**
   * Sets the value of the 'comment' field.
   * @param value the value to set.
   */
  public void setComment(java.lang.CharSequence value) {
    this.comment = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.CharSequence getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.CharSequence value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'originalPrice' field.
   * @return The value of the 'originalPrice' field.
   */
  public java.lang.CharSequence getOriginalPrice() {
    return originalPrice;
  }


  /**
   * Sets the value of the 'originalPrice' field.
   * @param value the value to set.
   */
  public void setOriginalPrice(java.lang.CharSequence value) {
    this.originalPrice = value;
  }

  /**
   * Gets the value of the 'space' field.
   * @return The value of the 'space' field.
   */
  public java.lang.CharSequence getSpace() {
    return space;
  }


  /**
   * Sets the value of the 'space' field.
   * @param value the value to set.
   */
  public void setSpace(java.lang.CharSequence value) {
    this.space = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Creates a new FlatData RecordBuilder.
   * @return A new FlatData RecordBuilder
   */
  public static com.pagacz.kafka.listener.model.generated.FlatData.Builder newBuilder() {
    return new com.pagacz.kafka.listener.model.generated.FlatData.Builder();
  }

  /**
   * Creates a new FlatData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FlatData RecordBuilder
   */
  public static com.pagacz.kafka.listener.model.generated.FlatData.Builder newBuilder(com.pagacz.kafka.listener.model.generated.FlatData.Builder other) {
    if (other == null) {
      return new com.pagacz.kafka.listener.model.generated.FlatData.Builder();
    } else {
      return new com.pagacz.kafka.listener.model.generated.FlatData.Builder(other);
    }
  }

  /**
   * Creates a new FlatData RecordBuilder by copying an existing FlatData instance.
   * @param other The existing instance to copy.
   * @return A new FlatData RecordBuilder
   */
  public static com.pagacz.kafka.listener.model.generated.FlatData.Builder newBuilder(com.pagacz.kafka.listener.model.generated.FlatData other) {
    if (other == null) {
      return new com.pagacz.kafka.listener.model.generated.FlatData.Builder();
    } else {
      return new com.pagacz.kafka.listener.model.generated.FlatData.Builder(other);
    }
  }

  /**
   * RecordBuilder for FlatData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlatData>
    implements org.apache.avro.data.RecordBuilder<FlatData> {

    private java.lang.CharSequence title;
    private java.lang.CharSequence source;
    private java.lang.CharSequence link;
    private java.lang.CharSequence comment;
    private java.lang.CharSequence price;
    private java.lang.CharSequence originalPrice;
    private java.lang.CharSequence space;
    private java.lang.CharSequence address;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pagacz.kafka.listener.model.generated.FlatData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.link)) {
        this.link = data().deepCopy(fields()[2].schema(), other.link);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.comment)) {
        this.comment = data().deepCopy(fields()[3].schema(), other.comment);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.originalPrice)) {
        this.originalPrice = data().deepCopy(fields()[5].schema(), other.originalPrice);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.space)) {
        this.space = data().deepCopy(fields()[6].schema(), other.space);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.address)) {
        this.address = data().deepCopy(fields()[7].schema(), other.address);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing FlatData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pagacz.kafka.listener.model.generated.FlatData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.link)) {
        this.link = data().deepCopy(fields()[2].schema(), other.link);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comment)) {
        this.comment = data().deepCopy(fields()[3].schema(), other.comment);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.originalPrice)) {
        this.originalPrice = data().deepCopy(fields()[5].schema(), other.originalPrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.space)) {
        this.space = data().deepCopy(fields()[6].schema(), other.space);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.address)) {
        this.address = data().deepCopy(fields()[7].schema(), other.address);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.source = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder clearSource() {
      source = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'link' field.
      * @return The value.
      */
    public java.lang.CharSequence getLink() {
      return link;
    }


    /**
      * Sets the value of the 'link' field.
      * @param value The value of 'link'.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder setLink(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.link = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'link' field has been set.
      * @return True if the 'link' field has been set, false otherwise.
      */
    public boolean hasLink() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'link' field.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder clearLink() {
      link = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'comment' field.
      * @return The value.
      */
    public java.lang.CharSequence getComment() {
      return comment;
    }


    /**
      * Sets the value of the 'comment' field.
      * @param value The value of 'comment'.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder setComment(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.comment = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'comment' field has been set.
      * @return True if the 'comment' field has been set, false otherwise.
      */
    public boolean hasComment() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'comment' field.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder clearComment() {
      comment = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.CharSequence getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder setPrice(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder clearPrice() {
      price = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'originalPrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getOriginalPrice() {
      return originalPrice;
    }


    /**
      * Sets the value of the 'originalPrice' field.
      * @param value The value of 'originalPrice'.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder setOriginalPrice(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.originalPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'originalPrice' field has been set.
      * @return True if the 'originalPrice' field has been set, false otherwise.
      */
    public boolean hasOriginalPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'originalPrice' field.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder clearOriginalPrice() {
      originalPrice = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'space' field.
      * @return The value.
      */
    public java.lang.CharSequence getSpace() {
      return space;
    }


    /**
      * Sets the value of the 'space' field.
      * @param value The value of 'space'.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder setSpace(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.space = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'space' field has been set.
      * @return True if the 'space' field has been set, false otherwise.
      */
    public boolean hasSpace() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'space' field.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder clearSpace() {
      space = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.address = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.pagacz.kafka.listener.model.generated.FlatData.Builder clearAddress() {
      address = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FlatData build() {
      try {
        FlatData record = new FlatData();
        record.title = fieldSetFlags()[0] ? this.title : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.source = fieldSetFlags()[1] ? this.source : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.link = fieldSetFlags()[2] ? this.link : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.comment = fieldSetFlags()[3] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.price = fieldSetFlags()[4] ? this.price : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.originalPrice = fieldSetFlags()[5] ? this.originalPrice : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.space = fieldSetFlags()[6] ? this.space : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.address = fieldSetFlags()[7] ? this.address : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FlatData>
    WRITER$ = (org.apache.avro.io.DatumWriter<FlatData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FlatData>
    READER$ = (org.apache.avro.io.DatumReader<FlatData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.title);

    out.writeString(this.source);

    out.writeString(this.link);

    out.writeString(this.comment);

    out.writeString(this.price);

    out.writeString(this.originalPrice);

    out.writeString(this.space);

    out.writeString(this.address);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);

      this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);

      this.link = in.readString(this.link instanceof Utf8 ? (Utf8)this.link : null);

      this.comment = in.readString(this.comment instanceof Utf8 ? (Utf8)this.comment : null);

      this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);

      this.originalPrice = in.readString(this.originalPrice instanceof Utf8 ? (Utf8)this.originalPrice : null);

      this.space = in.readString(this.space instanceof Utf8 ? (Utf8)this.space : null);

      this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
          break;

        case 1:
          this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);
          break;

        case 2:
          this.link = in.readString(this.link instanceof Utf8 ? (Utf8)this.link : null);
          break;

        case 3:
          this.comment = in.readString(this.comment instanceof Utf8 ? (Utf8)this.comment : null);
          break;

        case 4:
          this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);
          break;

        case 5:
          this.originalPrice = in.readString(this.originalPrice instanceof Utf8 ? (Utf8)this.originalPrice : null);
          break;

        case 6:
          this.space = in.readString(this.space instanceof Utf8 ? (Utf8)this.space : null);
          break;

        case 7:
          this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










